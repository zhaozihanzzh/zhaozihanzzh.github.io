<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++ 返回局部变量的引用与地址</title>
    <link href="/2020/10/24/local-variable-pr/"/>
    <url>/2020/10/24/local-variable-pr/</url>
    
    <content type="html"><![CDATA[<h1 id="C-返回局部变量的引用与地址"><a href="#C-返回局部变量的引用与地址" class="headerlink" title="C++ 返回局部变量的引用与地址"></a>C++ 返回局部变量的引用与地址</h1><p>听说 2020 - 1024 = 996？</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span>&amp; <span class="hljs-title">refer</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; arg)</span> </span>&#123;<span class="hljs-keyword">int</span> inter_var = <span class="hljs-number">1024</span>;<span class="hljs-keyword">return</span> inter_var;<span class="hljs-comment">// 返回局部变量的引用</span>&#125;<span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">pointer</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>&amp; arg)</span> </span>&#123;<span class="hljs-keyword">int</span> var = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> &amp;var;<span class="hljs-comment">// 返回指向局部变量的指针</span>&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">int</span> number = <span class="hljs-number">996</span>;<span class="hljs-comment">// cout &lt;&lt; refer(2020); 错误，不是常引用的引用作形参，实参只能是变量（或常量）。</span><span class="hljs-built_in">cout</span> &lt;&lt; &amp;refer(number) &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; refer(number)&lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 局部变量被销毁</span><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a_const_int = <span class="hljs-number">2020</span>;<span class="hljs-comment">// cout &lt;&lt; refer(a_const_int); 错误，形参访问限制不能弱于实参。</span><span class="hljs-built_in">cout</span> &lt;&lt; pointer(<span class="hljs-number">2020</span> - number) &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; *pointer(number) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 形参为常引用，实参可以为常量，变量，表达式，数值。</span><span class="hljs-keyword">void</span>* v = (<span class="hljs-keyword">void</span>*)pointer(number);<span class="hljs-built_in">cout</span> &lt;&lt; *(<span class="hljs-keyword">int</span>*)v &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201025001237263.png" alt="image-20201025001237263"></p><p>在 Visual Studio 中用 debug 编译，从外部试图访问局部变量时出现了 -858993460。让我们看一下：-858993460 的二进制表示在补码方案下其实是 -858993460 -(-2^31) + 2^31 = 3435973836 的二进制表示，转成 16 进制正是大名鼎鼎的 0xCCCCCCCC 。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201025003653131.png" alt="image-20201025003653131"></p><p>以上代码在 TDM-GCC 4.9.2 上编译，发现正常读取。不论哪种编译器，使用 void 指针间接访问均可行，这反映系统并不会在局部变量生命周期结束后便急着将它写入新的值，短时间内内存上的值还是不变的。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201025005648503.png" alt="image-20201025005648503"></p><p>不过在 Ubuntu 下用 gcc 9.3.0 编译就不一样了……</p><p>总之，这种操作应当避免……</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>进制转换</title>
    <link href="/2020/10/16/base-conversion/"/>
    <url>/2020/10/16/base-conversion/</url>
    
    <content type="html"><![CDATA[<h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><p>（无数的人已经写过这篇了）</p><p>首先介绍一下相关英文：</p><p>进制 Base</p><p>二进制 Binary</p><p>八进制 Octal</p><p>十进制 Decimal</p><p>十六进制 Hexadecimal</p><p>接下来探讨一下其转换。</p><h2 id="Part-1-整数部分"><a href="#Part-1-整数部分" class="headerlink" title="Part 1 整数部分"></a>Part 1 整数部分</h2><p>进制虽然不同，但其表示思想类似，即每一数位上的数字均代表进位的 n 次幂的倍数。因此，我们把其余数制转为十进制是直观容易的：</p><p>FEC (base 16) → 15×16²+14×16+12 (base 10)</p><p>如何将十进制转为其他进制呢？只需逆向以上过程：</p><p>1492 (base 10) → 512×2+64×7+8×2+1×4 (base 10) →2724 (base 8)</p><p>这样，以十进制为桥梁，可以实现进制转换。</p><p>针对十进制转二进制，可以使用长除法，应用“先余为低，后余为高”：（最先得出的余数可以认为代表低数位）</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201016234356469.png" alt="image-20201016234356469"></p><p>将 13 转为二进制，结果为 1101。</p><p>此外，由于除了十进制外的十六进制、八进制的进制数都是 2 的幂，我们也可以从二进制直接转至十六进制或八进制。举个例子，对于 111110110 (base 2) = 766 (base 8)，由于 2³=8 ，从右向左三位三位地分节，将每一节所对应的三位二进制数转为一位八进制后按原节次序排列即可。十六进制同理。</p><p>同样地，也可以用此方法将十六进制、八进制转为二进制，记得补 0 以占位。</p><h2 id="Part-2-小数部分"><a href="#Part-2-小数部分" class="headerlink" title="Part 2 小数部分"></a>Part 2 小数部分</h2><p>一个数的小数部分实质上是当 n 的指数为负数时对整数部分的扩展，对于其他进制转为十进制，这不难理解。但十进制往外转时，除以 n 的负数次幂再取余这一过程可以转成不断对小数部分乘以进制数且按照“先整为高，后整为低”原则取出商数：对于 0.375 (base 10) 转成二进制：</p><p>0.375×2=0.75 -&gt; 0</p><p>0.75×2=1.5     -&gt; 1</p><p>0.5×2=1          -&gt; 1</p><p>化为 0.011 (base 2)。</p>]]></content>
    
    
    <categories>
      
      <category>计算机杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio 模拟器体验 Android Q</title>
    <link href="/2020/10/11/android11/"/>
    <url>/2020/10/11/android11/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-模拟器体验-Android-Q"><a href="#Android-Studio-模拟器体验-Android-Q" class="headerlink" title="Android Studio 模拟器体验 Android Q"></a>Android Studio 模拟器体验 Android Q</h1><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011004247000.png" alt="20201011001"></p><p>​        2020 年 9 月 9 日，Android 11 正式发布了。在这里，使用 Android Studio 自带模拟器对其进行一番轻度把玩。</p><h2 id="Part-1-初步体验"><a href="#Part-1-初步体验" class="headerlink" title="Part 1 初步体验"></a>Part 1 初步体验</h2><p>​        本次更新增强了聊天气泡（然而这里并没有体验），提升了权限方面的保护，在通知面板集成了音乐播放控制，在开发者选项加入对不同屏幕形态的模拟，还增强了电源菜单，修改了启动器部分细节、最近任务后台等等。</p><p>​        <img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011004247007.png" alt="image-20201011004247007"></p><p>正常的通知面板↑</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011004515860.png" alt="image-20201011004515860"></p><p>播放音乐时↑（可能需要 APP 适配？）</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005013961.png" alt="image-20201011005013961"></p><p>设置里可以开启通知历史记录了。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011004646477.png" alt="image-20201011004646477"></p><p>开发者选项，可怕。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011004751292.png" alt="image-20201011004751292"></p><p>电源菜单。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011004842462.png" alt="image-20201011004842462"></p><p>新的最近任务后台。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011004907812.png" alt="image-20201011004907812"></p><p>锁屏（为什么不显示全星期？）</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005121466.png" alt="image-20201011005121466"></p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005136070.png" alt="image-20201011005136070"></p><p>更新的手势（据说那个灵敏度调节有借鉴的成分？）</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005247493.png" alt="image-20201011005247493"></p><p>分享列表可以置顶选中应用了，合理利用应该比较方便，不过据说 Android 9 就有了，10 意外地砍掉了。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005404310.png" alt="image-20201011005404310"></p><p>原生终于有录屏了。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005503015.png" alt="image-20201011005503015"></p><p>“几个月”的权限。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005630444.png" alt="image-20201011005630444"></p><p>时钟好评。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005731378.png" alt="image-20201011005731378"></p><p>应用管理。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005757725.png" alt="image-20201011005757725"></p><p>拨号盘。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005826033.png" alt="image-20201011005826033"></p><p>音量。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005931564.png" alt="image-20201011005931564"></p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011005940489.png" alt="image-20201011005940489"></p><p>Pixel 启动器。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011010004781.png" alt="image-20201011010004781"></p><p>模拟器找不到那个“设备控制器”？</p><h2 id="Part-2-娱乐跑分"><a href="#Part-2-娱乐跑分" class="headerlink" title="Part 2 娱乐跑分"></a>Part 2 娱乐跑分</h2><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011010147837.png" alt="image-20201011010147837"></p><p>自带输入法怎么有酷安？是我孤陋寡闻么？</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011010254365.png" alt="image-20201011010254365"></p><p>从某安安装安兔兔，无论模拟器设置中图形渲染使用硬件还是软件，GPU 测试均无法运行。那就这样吧。</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011010501264.png" alt="image-20201011010501264"></p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011010517240.png" alt="image-20201011010517240"></p><p>Are you okay?</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011010545207.png" alt="image-20201011010545207"></p><p>娱乐大师无法运行……</p><p><img src="https://raw.githubusercontent.com/zhaozihanzzh/zhaozihanzzh.github.io/master/images/image-20201011010625076.png" alt="image-20201011010625076"></p><p>感觉 GeekBench 负载好像不太够，每个项目总是 CPU 没跑满就换下一个项目了。不过娱乐兔三十万分的机器怎么就超越了骁龙 865？</p><p>娱乐到此结束……</p>]]></content>
    
    
    <categories>
      
      <category>娱乐</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/30/hello-world/"/>
    <url>/2020/09/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>There is only one heroism in the world: to see the world as it is and to love it.</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
